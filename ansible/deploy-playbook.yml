---
- name: Setup machine and start webserver
  hosts: all
  become: true

  vars:
    db_name: jdbc_schema
    db_user: myuser
    db_password: secret
    pg_conf_path: /etc/postgresql/16/main/postgresql.conf
    hba_path: /etc/postgresql/16/main/pg_hba.conf

  tasks:

    # Set up environment tasks

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Check postgresql installation
      apt:
        name: postgresql
        state: present

    - name: Check postgresql service status
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Check OpenJDK 21 installation
      apt:
        name: openjdk-21-jdk
        state: present

    - name: Check maven installation
      apt:
        name: maven
        state: present

    # Set up postgres

    - name: Set PostgreSQL authentication for postgres to md5
      ansible.builtin.replace:
        path: "{{ hba_path }}"
        regexp: '^(\s*local\s+all\s+all\s+)peer'
        replace: '\1md5'
        backup: yes
      notify: Restart PostgreSQL

    - name: Set PostgreSQL authentication for conncetions to md5
      ansible.builtin.replace:
        path: "{{ hba_path }}"
        regexp: 'scram-sha-256'
        replace: 'md5'
        backup: yes
      notify: Restart PostgreSQL

    - name: Set password encryption
      command: >-
        sudo -u postgres psql -c
        "SET password_encryption = 'md5';"
      become: true

    - name: Ensure user existence
      command: >-
        sudo -u postgres psql -c
        "CREATE USER {{ db_user }} WITH PASSWORD '{{ db_password }}';"
      become: true
      ignore_errors: true

    - name: Ensure db existence
      command: >-
        sudo -u postgres psql -c
        "CREATE DATABASE jdbc_schema OWNER {{ db_user }};"
      become: true
      ignore_errors: true

    - name: Grant privileges
      command: >-
        sudo -u postgres psql -c
        "GRANT ALL PRIVILEGES ON DATABASE jdbc_schema TO {{ db_user }};"
      become: true
      ignore_errors: true

    # App execution tasks
    - name: Copy .jar file from runner to ec2
      copy:
        src: "{{ artifact_path }}/{{ app_name }}.jar"
        dest: /opt/product-service.jar
        mode: '0755'

    - name: Managing .jar execution as a service
      copy:
        dest: /etc/systemd/system/webapp.service
        content: |
          [Unit]
          Description=Product Service Webapp
          After=network.target

          [Service]
          User=ubuntu
          ExecStart=/usr/bin/java -jar /opt/product-service.jar
          SuccessExitStatus=143
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
      become: true


    - name: Starting webapp service
      systemd:
        name: webapp
        enabled: true
        state: restarted
      become: true

  handlers:
      - name: Restart PostgreSQL
        ansible.builtin.service:
          name: postgresql
          state: restarted
