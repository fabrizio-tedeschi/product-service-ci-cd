# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI-CD Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  lint:
    runs-on: ubuntu-latest
    if: false

    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - name: Super-linter
        uses: super-linter/super-linter@v7.2.0 # x-release-please-version
        env:
          VALIDATE_JAVA: true
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

  gitguardian-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history so multiple commits can be scanned
      - name: GitGuardian scan
        uses: GitGuardian/ggshield/actions/secret@v1.34.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  semgrep-scan:
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci
        env:
          # Connect to Semgrep AppSec Platform through your SEMGREP_APP_TOKEN.
          # Generate a token from Semgrep AppSec Platform > Settings
          # and add it to your GitHub secrets.
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  build-artifact:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Prepare Java environment
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Step 3: Build with Maven
      - run: mvn --batch-mode --update-snapshots verify

      # Step 4: Copy artifact into a separate directory
      - run: mkdir staging && cp target/*.jar staging

      # Step 5: Upload artifact to Github
      - uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: staging

  build-push-container-image:
    runs-on: ubuntu-latest
    needs: build-artifact

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Download JAR artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: target/

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build the Docker image
      - name: Build Docker Image
        run: docker build -t nbicocchi/product-service-ci-cd:latest .

      # Step 5: Push the Docker image to Docker Hub
      - name: Push Docker Image
        run: docker push nbicocchi/product-service-ci-cd:latest
