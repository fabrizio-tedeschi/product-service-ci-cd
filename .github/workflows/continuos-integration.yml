# CI/CD Workflow for building, scanning, and deploying a Java project
# Includes steps for linting, security scans, artifact building, and Docker image deployment

name: Continuos integration

on:
  push:
    branches: [ "main" ] # Trigger on pushes to the main branch
  pull_request:
    branches: [ "main" ] # Trigger on pull requests targeting the main branch

jobs:
  # Lint Scan Job
  lint-scan:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    permissions:
      contents: read # Required to access repository contents
      packages: read # Required to read packages
      statuses: write # Allow reporting GitHub status checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Super-Linter
        uses: super-linter/super-linter@v7.3.0
        env:
          VALIDATE_JAVA: true # Enables checks for Java and disables all others
          GITHUB_TOKEN: ${{ secrets.TOKEN }} # Authentication token

  # GitGuardian Secrets Scan Job
  gitguardian-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: GitGuardian Scan
        uses: GitGuardian/ggshield-action@v1
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # Semgrep Security Scan Job
  semgrep-scan:
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep # Use Semgrep container image

    if: (github.actor != 'dependabot[bot]') # Skip dependabot PRs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep Scan
        run: semgrep ci
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }} # Authentication token for Semgrep

  # Build Artifact Job
  build-artifact:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [21, 22] # Test against Java 21, 22

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java Environment
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }} # Use the version from the matrix
          distribution: 'temurin'
          cache: maven # Enable Maven dependency caching

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots verify

      - name: Copy Build Artifact
        run: mkdir staging && cp target/*.jar staging

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact-java-${{ matrix.java-version }} # Make the artifact name include the Java version
          path: staging


  # Build and Push Docker Image Job
  build-push-container-image:
    runs-on: ubuntu-latest
    needs: build-artifact # Depend on the artifact build job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact-java-21
          path: target/

      - name: Build Docker Image
        run: docker build -t nbicocchi/product-service-ci-cd:latest .

      - name: Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'docker.io/nbicocchi/product-service-ci-cd:latest'
          format: 'table'
          exit-code: '1' # Fail the job if critical issues are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Docker Hub username
          password: ${{ secrets.DOCKER_PASSWORD }} # Docker Hub password

      - name: Push Docker Image to Docker Hub
        run: docker push nbicocchi/product-service-ci-cd:latest
